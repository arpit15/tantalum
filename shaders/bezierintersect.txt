#define draw(d, c) color = mix(color, c, smoothstep(unit, 0.0, d))

struct Intersect {
    int count;
    // vec2[3] p;
    // vec2[3] der;
    vec2 p1, p2, p3;
    vec2 der1, der2, der3;
};

float sdLine(in vec2 p, in vec2 a, in vec2 b) {
    vec2 pa = p - a, ba = b - a;
    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));
}

const vec2 eta = vec2(-0.5, sqrt(0.75));
int solveCubic(in float a, in float b, in float c, in float d, out vec3 roots) {
    float h = 18.0 * a * b * c * d - 4.0 * b * b * b * d + b * b * c * c - 4.0 * a * c * c * c - 27.0 * a * a * d * d;

    b /= a, c /= a, d /= a;
    float d0 = b * b - 3.0 * c;
    float d1 = (2.0 * b * b - 9.0 * c) * b + 27.0 * d;
    float q = d1 * d1 - 4.0 * d0 * d0 * d0, j = sqrt(abs(q));

    vec2 C = q < 0.0 ? vec2(d1, j) : vec2(d1 + j, 0.0);
    if (abs(C.x) + abs(C.y) < 1e-3) C = vec2(d1 - j, 0.0);
    float t = atan(C.y, C.x) / 3.0, r = pow(0.25 * dot(C, C), 1.0 / 6.0);
    C = vec2(cos(t), sin(t));

    float w = -d0 / r - r;
    roots.x = (C.x * w - b) / 3.0;
    roots.y = (dot(vec2(C.x, -C.y), eta) * w - b) / 3.0;
    if (h > 0.0) roots.z = (dot(C, eta) * w - b) / 3.0;
    else if (abs(dot(C.yx, eta)) < abs(C.y)) roots.x = roots.y;

    return h < 0.0 ? 1 : 3;
}

vec2 BezierCurvePointDer(in vec2 a, in vec2 b, in vec2 c, in vec2 d, in float t) {
    float tInv = 1.0 - t;
    vec2 tangent =  a * 3.0 * tInv * tInv +
           b * 3.0 * (tInv * tInv + t * 2.0 * tInv) +
           c * 3.0 * (tInv * 2.0 * t + t * t * (-t)) +
           d * 3.0 * t * t;

    return vec2(-tangent[1], tangent[0]);
}

vec2 BezierCurvePoint(in vec2 a, in vec2 b, in vec2 c, in vec2 d, in float t) {
    float tInv = 1.0 - t;
    return a * tInv * tInv * tInv +
           b * 3.0 * t * tInv * tInv +
           c * 3.0 * tInv * t * t +
           d * t * t * t;
}

mat2 transpose(mat2 inp) {
    mat2 outp = mat2(0.0,0.0,0.0,0.0);
    outp[0, 0] = inp[0, 0];  outp[0,1] = inp[1,0];
    outp[1, 0] = inp[0, 1];  outp[1,1] = inp[1,1];
    return outp;       
}

Intersect BezierLineIntersect(in vec2 ca, in vec2 cb, in vec2 cc, in vec2 cd, in vec2 la, in vec2 lb) {
    vec2 ba = lb - la;
    float baba = dot(ba, ba);
    vec2 ld = normalize(ba);

    mat2 invRot = mat2(ld, -ld.y, ld.x);
    mat2 rot = transpose(invRot);

    ca = (ca - la) * invRot;
    cb = (cb - la) * invRot;
    cc = (cc - la) * invRot;
    cd = (cd - la) * invRot;

    float coeff1 = 3.0 * cb.y - 3.0 * cc.y - ca.y + cd.y;
    float coeff2 = 3.0 * ca.y - 6.0 * cb.y + 3.0 * cc.y;
    float coeff3 = 3.0 * cb.y - 3.0 * ca.y;
    float coeff4 = ca.y;

    vec3 t;
    int nroots = solveCubic(coeff1, coeff2, coeff3, coeff4, t);

    // vec2[3] intersects;
    // vec2[3] derivatives;
    int count = 0;

    Intersect outval; 
    outval.count = 0;
    for (int n=0; n < 3; n++) {
        if(n>nroots){
            break;
        }
        if (abs(t[n] - 0.5) <= 0.5) {
            vec2 p = BezierCurvePoint(ca, cb, cc, cd, t[n]) * rot;
            vec2 der = BezierCurvePointDer(ca, cb, cc, cd, t[n]) * rot;
            if (abs(dot(p, ba) / baba - 0.5) <= 0.5) {
                // intersects[count] = p + la;
                // derivatives[count] = der;
                outval.count++;
                if (n==1) {
                    outval.p1 = p + la;
                    outval.der1 = der;
                }
                else if(n==2) {
                    outval.p2 = p + la;
                    outval.der2 = der;
                } else {
                    outval.p3 = p + la;
                    outval.der3 = der;
                }

            }
        }
    }

    return outval;
}