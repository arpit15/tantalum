#include "trace-frag"

#include "bsdf"
#include "intersect"

void intersect(Ray ray, inout Intersection isect) {
    // design params
    float scale=10.0;
    float epoxy_th = 4.4/scale;
    float pdms_th = 1.69/scale;
    float pt2_y = 7.95/scale;
    float diffuse_surface_rad = 12.75/scale + pdms_th;
    // ----
    vec2 design_p1 = vec2( diffuse_surface_rad, 0.0 );
    vec2 design_p2 = vec2( diffuse_surface_rad, pt2_y );
    vec2 design_p3 = vec2( 2.0/scale , diffuse_surface_rad + pt2_y - 2.0/scale ); // randomly chosen
    vec2 design_p4 = vec2( 0.0, diffuse_surface_rad + pt2_y);
    
    // ----
    float decr = epoxy_th + pdms_th;
    vec2 edesign_p1 = vec2(design_p1[0] - decr, design_p1[1]);
    vec2 edesign_p2 = vec2(design_p2[0] - decr, design_p2[1]);
    vec2 edesign_p3 = vec2(design_p3[0] - decr/5.0, design_p3[1] - decr); // not correct always
    vec2 edesign_p4 = vec2(design_p4[0], design_p4[1] - decr);

    // innercurve = [edesign_p1[0], edesign_p1[1], edesign_p2[0], edesign_p2[1], edesign_p3[0], edesign_p3[1], edesign_p4[0], edesign_p4[1]]
    // -----
    float innermat = 0.0;
    float outermat = 0.0;
    // outer surface
    bezierIntersect(ray, design_p1, design_p2, design_p3, design_p4, outermat, isect);
    // inner surface
    bezierIntersect(ray, edesign_p1, edesign_p2, edesign_p3, edesign_p4, innermat, isect);

}

vec2 sample(inout vec4 state, Intersection isect, float lambda, vec2 wiLocal, inout vec3 throughput) {
    if (isect.mat == 1.0) {
        float ior=1.5;
        return sampleDielectric(state, wiLocal, ior);
    } else if (isect.mat == 2.0) {
        return sampleMirror(wiLocal);
    } else {
        throughput *= vec3(0.5);
        return sampleDiffuse(state, wiLocal);
    }
}
