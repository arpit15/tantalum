#include "trace-frag"

#include "bsdf"
#include "intersect"

void intersect(Ray ray, inout Intersection isect) {
    float innermat = 2.0;
    float outermat = 2.0;
    // outer surface
    lineIntersect(ray, vec2(0.5, -0.2), vec2(0.5, 0.0), outermat, isect);
    lineIntersect(ray, vec2(0.5, 0.0), vec2(0.2, 0.5), outermat, isect);
    lineIntersect(ray, vec2(0.2, 0.5), vec2(-0.2, 0.5), outermat, isect);
    lineIntersect(ray, vec2(-0.2, 0.5), vec2(-0.5, 0.0), outermat, isect);
    lineIntersect(ray, vec2(-0.5, 0.0), vec2(-0.5, -0.2), outermat, isect);

    // inner surface
    lineIntersect(ray, vec2(0.2, 0.), vec2(0.2, -0.2), innermat, isect);
    lineIntersect(ray, vec2(0.0, 0.2), vec2(0.2, 0.), innermat, isect);
    lineIntersect(ray, vec2(-0.2, 0.), vec2(0.0, 0.2), innermat, isect);
    lineIntersect(ray, vec2(-0.2, 0.), vec2(-0.2, -0.2), innermat, isect);

}

vec2 sample(inout vec4 state, Intersection isect, float lambda, vec2 wiLocal, inout vec3 throughput) {
    if (isect.mat == 1.0) {
        float ior=1.5;
        return sampleDielectric(state, wiLocal, ior);
    } else if (isect.mat == 2.0) {
        return sampleMirror(wiLocal);
    } else {
        throughput *= vec3(0.5);
        return sampleDiffuse(state, wiLocal);
    }
}
