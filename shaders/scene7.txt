#include "trace-frag"

#include "bsdf"
#include "intersect"
#include "csg-intersect"

void intersect(Ray ray, inout Intersection isect) {
    // planoConvexLensIntersect(ray, vec2(0.0, 0.0), 0.5, 0.5, 1.0,    1.0, isect);
    // shellIntersect2(ray, vec2(1.0, 0.0), 0.5, 0.5, 0.1,    1.0, isect);

    shellIntersect(ray, vec2(1.0, 0.0), 0.5, 0.5,     4.0, isect);
    shellIntersect(ray, vec2(1.0, 0.0), 0.4, 0.5,     2.0, isect);
    shellIntersect(ray, vec2(1.0, 0.0), 0.3, 0.5,     1.0, isect);
}

vec2 sample(inout vec4 state, Intersection isect, float lambda, vec2 wiLocal, inout vec3 throughput) {
    if (isect.mat == 1.0) {
        float ior = 1.0/1.5;
        return sampleDielectric(state, wiLocal, ior);
    } else if (isect.mat == 2.0) {
        float ior = 1.4/1.5;
        return sampleDielectric(state, wiLocal, ior);
    }  
    else if (isect.mat == 3.0) {
        return sampleMirror(wiLocal);
    } else {
        throughput *= vec3(0.25);
        return sampleDiffuse(state, wiLocal);
    }
}
